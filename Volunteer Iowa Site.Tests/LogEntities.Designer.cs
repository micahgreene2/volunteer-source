//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LogEntities", "LogUserProfile", "Log", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.Log), "UserProfile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.Users), true)]
[assembly: EdmRelationshipAttribute("LogEntities", "LogOrganization", "Log", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.Log), "Organization", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.Organization), true)]
[assembly: EdmRelationshipAttribute("LogEntities", "LogEvent", "Log", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.Log), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.Event), true)]
[assembly: EdmRelationshipAttribute("LogEntities", "AddressEvent", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.Address), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.Event), true)]
[assembly: EdmRelationshipAttribute("LogEntities", "AddressCity", "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.Address), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.City), true)]
[assembly: EdmRelationshipAttribute("LogEntities", "Citycounty", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Volunteer_Iowa_Site.City), "county", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Volunteer_Iowa_Site.county), true)]

#endregion

namespace Volunteer_Iowa_Site
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LogEntitiesContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LogEntitiesContainer object using the connection string found in the 'LogEntitiesContainer' section of the application configuration file.
        /// </summary>
        public LogEntitiesContainer() : base("name=LogEntitiesContainer", "LogEntitiesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LogEntitiesContainer object.
        /// </summary>
        public LogEntitiesContainer(string connectionString) : base(connectionString, "LogEntitiesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LogEntitiesContainer object.
        /// </summary>
        public LogEntitiesContainer(EntityConnection connection) : base(connection, "LogEntitiesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Log> Logs
        {
            get
            {
                if ((_Logs == null))
                {
                    _Logs = base.CreateObjectSet<Log>("Logs");
                }
                return _Logs;
            }
        }
        private ObjectSet<Log> _Logs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Users> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<Users>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<Users> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Organization> Organizations
        {
            get
            {
                if ((_Organizations == null))
                {
                    _Organizations = base.CreateObjectSet<Organization>("Organizations");
                }
                return _Organizations;
            }
        }
        private ObjectSet<Organization> _Organizations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Event> Events
        {
            get
            {
                if ((_Events == null))
                {
                    _Events = base.CreateObjectSet<Event>("Events");
                }
                return _Events;
            }
        }
        private ObjectSet<Event> _Events;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Addresses
        {
            get
            {
                if ((_Addresses == null))
                {
                    _Addresses = base.CreateObjectSet<Address>("Addresses");
                }
                return _Addresses;
            }
        }
        private ObjectSet<Address> _Addresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<county> counties
        {
            get
            {
                if ((_counties == null))
                {
                    _counties = base.CreateObjectSet<county>("counties");
                }
                return _counties;
            }
        }
        private ObjectSet<county> _counties;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Logs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLogs(Log log)
        {
            base.AddObject("Logs", log);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(Users users)
        {
            base.AddObject("Users", users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Organizations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganizations(Organization organization)
        {
            base.AddObject("Organizations", organization);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Events EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEvents(Event @event)
        {
            base.AddObject("Events", @event);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Addresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddresses(Address address)
        {
            base.AddObject("Addresses", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the counties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTocounties(county county)
        {
            base.AddObject("counties", county);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="Address")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Address : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="lineOne">Initial value of the lineOne property.</param>
        /// <param name="lineTwo">Initial value of the lineTwo property.</param>
        /// <param name="zip">Initial value of the zip property.</param>
        /// <param name="cityID">Initial value of the cityID property.</param>
        public static Address CreateAddress(global::System.Int32 id, global::System.String lineOne, global::System.String lineTwo, global::System.String zip, global::System.Int32 cityID)
        {
            Address address = new Address();
            address.Id = id;
            address.lineOne = lineOne;
            address.lineTwo = lineTwo;
            address.zip = zip;
            address.cityID = cityID;
            return address;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String lineOne
        {
            get
            {
                return _lineOne;
            }
            set
            {
                OnlineOneChanging(value);
                ReportPropertyChanging("lineOne");
                _lineOne = StructuralObject.SetValidValue(value, false, "lineOne");
                ReportPropertyChanged("lineOne");
                OnlineOneChanged();
            }
        }
        private global::System.String _lineOne;
        partial void OnlineOneChanging(global::System.String value);
        partial void OnlineOneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String lineTwo
        {
            get
            {
                return _lineTwo;
            }
            set
            {
                OnlineTwoChanging(value);
                ReportPropertyChanging("lineTwo");
                _lineTwo = StructuralObject.SetValidValue(value, false, "lineTwo");
                ReportPropertyChanged("lineTwo");
                OnlineTwoChanged();
            }
        }
        private global::System.String _lineTwo;
        partial void OnlineTwoChanging(global::System.String value);
        partial void OnlineTwoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String zip
        {
            get
            {
                return _zip;
            }
            set
            {
                OnzipChanging(value);
                ReportPropertyChanging("zip");
                _zip = StructuralObject.SetValidValue(value, false, "zip");
                ReportPropertyChanged("zip");
                OnzipChanged();
            }
        }
        private global::System.String _zip;
        partial void OnzipChanging(global::System.String value);
        partial void OnzipChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 cityID
        {
            get
            {
                return _cityID;
            }
            set
            {
                OncityIDChanging(value);
                ReportPropertyChanging("cityID");
                _cityID = StructuralObject.SetValidValue(value, "cityID");
                ReportPropertyChanged("cityID");
                OncityIDChanged();
            }
        }
        private global::System.Int32 _cityID;
        partial void OncityIDChanging(global::System.Int32 value);
        partial void OncityIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "AddressEvent", "Event")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("LogEntities.AddressEvent", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("LogEntities.AddressEvent", "Event", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "AddressCity", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("LogEntities.AddressCity", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("LogEntities.AddressCity", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("LogEntities.AddressCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("LogEntities.AddressCity", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="countyID">Initial value of the countyID property.</param>
        public static City CreateCity(global::System.Int32 id, global::System.String name, global::System.Int32 countyID)
        {
            City city = new City();
            city.Id = id;
            city.name = name;
            city.countyID = countyID;
            return city;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 countyID
        {
            get
            {
                return _countyID;
            }
            set
            {
                OncountyIDChanging(value);
                ReportPropertyChanging("countyID");
                _countyID = StructuralObject.SetValidValue(value, "countyID");
                ReportPropertyChanged("countyID");
                OncountyIDChanged();
            }
        }
        private global::System.Int32 _countyID;
        partial void OncountyIDChanging(global::System.Int32 value);
        partial void OncountyIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "AddressCity", "Address")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("LogEntities.AddressCity", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("LogEntities.AddressCity", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "Citycounty", "county")]
        public county county
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<county>("LogEntities.Citycounty", "county").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<county>("LogEntities.Citycounty", "county").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<county> countyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<county>("LogEntities.Citycounty", "county");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<county>("LogEntities.Citycounty", "county", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="county")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class county : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new county object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static county Createcounty(global::System.Int32 id, global::System.String name)
        {
            county county = new county();
            county.Id = id;
            county.name = name;
            return county;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "Citycounty", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("LogEntities.Citycounty", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("LogEntities.Citycounty", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="Event")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Event : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Event object.
        /// </summary>
        /// <param name="eventID">Initial value of the eventID property.</param>
        /// <param name="eventName">Initial value of the eventName property.</param>
        /// <param name="startDate">Initial value of the startDate property.</param>
        /// <param name="endDate">Initial value of the endDate property.</param>
        /// <param name="addressID">Initial value of the addressID property.</param>
        public static Event CreateEvent(global::System.Int32 eventID, global::System.String eventName, global::System.DateTime startDate, global::System.DateTime endDate, global::System.Int32 addressID)
        {
            Event @event = new Event();
            @event.eventID = eventID;
            @event.eventName = eventName;
            @event.startDate = startDate;
            @event.endDate = endDate;
            @event.addressID = addressID;
            return @event;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 eventID
        {
            get
            {
                return _eventID;
            }
            set
            {
                if (_eventID != value)
                {
                    OneventIDChanging(value);
                    ReportPropertyChanging("eventID");
                    _eventID = StructuralObject.SetValidValue(value, "eventID");
                    ReportPropertyChanged("eventID");
                    OneventIDChanged();
                }
            }
        }
        private global::System.Int32 _eventID;
        partial void OneventIDChanging(global::System.Int32 value);
        partial void OneventIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String eventName
        {
            get
            {
                return _eventName;
            }
            set
            {
                OneventNameChanging(value);
                ReportPropertyChanging("eventName");
                _eventName = StructuralObject.SetValidValue(value, false, "eventName");
                ReportPropertyChanged("eventName");
                OneventNameChanged();
            }
        }
        private global::System.String _eventName;
        partial void OneventNameChanging(global::System.String value);
        partial void OneventNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime startDate
        {
            get
            {
                return _startDate;
            }
            set
            {
                OnstartDateChanging(value);
                ReportPropertyChanging("startDate");
                _startDate = StructuralObject.SetValidValue(value, "startDate");
                ReportPropertyChanged("startDate");
                OnstartDateChanged();
            }
        }
        private global::System.DateTime _startDate;
        partial void OnstartDateChanging(global::System.DateTime value);
        partial void OnstartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime endDate
        {
            get
            {
                return _endDate;
            }
            set
            {
                OnendDateChanging(value);
                ReportPropertyChanging("endDate");
                _endDate = StructuralObject.SetValidValue(value, "endDate");
                ReportPropertyChanged("endDate");
                OnendDateChanged();
            }
        }
        private global::System.DateTime _endDate;
        partial void OnendDateChanging(global::System.DateTime value);
        partial void OnendDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 addressID
        {
            get
            {
                return _addressID;
            }
            set
            {
                OnaddressIDChanging(value);
                ReportPropertyChanging("addressID");
                _addressID = StructuralObject.SetValidValue(value, "addressID");
                ReportPropertyChanged("addressID");
                OnaddressIDChanged();
            }
        }
        private global::System.Int32 _addressID;
        partial void OnaddressIDChanging(global::System.Int32 value);
        partial void OnaddressIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogEvent", "Log")]
        public EntityCollection<Log> Logs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Log>("LogEntities.LogEvent", "Log");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Log>("LogEntities.LogEvent", "Log", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "AddressEvent", "Address")]
        public Address Address
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("LogEntities.AddressEvent", "Address").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("LogEntities.AddressEvent", "Address").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Address> AddressReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Address>("LogEntities.AddressEvent", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Address>("LogEntities.AddressEvent", "Address", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="Log")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Log : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Log object.
        /// </summary>
        /// <param name="logID">Initial value of the logID property.</param>
        /// <param name="hoursLogged">Initial value of the hoursLogged property.</param>
        /// <param name="userId">Initial value of the userId property.</param>
        /// <param name="orgID">Initial value of the orgID property.</param>
        /// <param name="eventID">Initial value of the eventID property.</param>
        public static Log CreateLog(global::System.Int32 logID, global::System.Int32 hoursLogged, global::System.Int32 userId, global::System.Int32 orgID, global::System.Int32 eventID)
        {
            Log log = new Log();
            log.logID = logID;
            log.hoursLogged = hoursLogged;
            log.userId = userId;
            log.orgID = orgID;
            log.eventID = eventID;
            return log;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 logID
        {
            get
            {
                return _logID;
            }
            set
            {
                if (_logID != value)
                {
                    OnlogIDChanging(value);
                    ReportPropertyChanging("logID");
                    _logID = StructuralObject.SetValidValue(value, "logID");
                    ReportPropertyChanged("logID");
                    OnlogIDChanged();
                }
            }
        }
        private global::System.Int32 _logID;
        partial void OnlogIDChanging(global::System.Int32 value);
        partial void OnlogIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 hoursLogged
        {
            get
            {
                return _hoursLogged;
            }
            set
            {
                OnhoursLoggedChanging(value);
                ReportPropertyChanging("hoursLogged");
                _hoursLogged = StructuralObject.SetValidValue(value, "hoursLogged");
                ReportPropertyChanged("hoursLogged");
                OnhoursLoggedChanged();
            }
        }
        private global::System.Int32 _hoursLogged;
        partial void OnhoursLoggedChanging(global::System.Int32 value);
        partial void OnhoursLoggedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 userId
        {
            get
            {
                return _userId;
            }
            set
            {
                OnuserIdChanging(value);
                ReportPropertyChanging("userId");
                _userId = StructuralObject.SetValidValue(value, "userId");
                ReportPropertyChanged("userId");
                OnuserIdChanged();
            }
        }
        private global::System.Int32 _userId;
        partial void OnuserIdChanging(global::System.Int32 value);
        partial void OnuserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 orgID
        {
            get
            {
                return _orgID;
            }
            set
            {
                OnorgIDChanging(value);
                ReportPropertyChanging("orgID");
                _orgID = StructuralObject.SetValidValue(value, "orgID");
                ReportPropertyChanged("orgID");
                OnorgIDChanged();
            }
        }
        private global::System.Int32 _orgID;
        partial void OnorgIDChanging(global::System.Int32 value);
        partial void OnorgIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 eventID
        {
            get
            {
                return _eventID;
            }
            set
            {
                OneventIDChanging(value);
                ReportPropertyChanging("eventID");
                _eventID = StructuralObject.SetValidValue(value, "eventID");
                ReportPropertyChanged("eventID");
                OneventIDChanged();
            }
        }
        private global::System.Int32 _eventID;
        partial void OneventIDChanging(global::System.Int32 value);
        partial void OneventIDChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogUserProfile", "UserProfile")]
        public Users UserProfile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("LogEntities.LogUserProfile", "UserProfile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("LogEntities.LogUserProfile", "UserProfile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UserProfileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("LogEntities.LogUserProfile", "UserProfile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("LogEntities.LogUserProfile", "UserProfile", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogOrganization", "Organization")]
        public Organization Organization
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("LogEntities.LogOrganization", "Organization").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("LogEntities.LogOrganization", "Organization").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Organization> OrganizationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("LogEntities.LogOrganization", "Organization");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Organization>("LogEntities.LogOrganization", "Organization", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogEvent", "Event")]
        public Event Event
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("LogEntities.LogEvent", "Event").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("LogEntities.LogEvent", "Event").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Event> EventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("LogEntities.LogEvent", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Event>("LogEntities.LogEvent", "Event", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="Organization")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Organization : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Organization object.
        /// </summary>
        /// <param name="orgID">Initial value of the OrgID property.</param>
        /// <param name="orgName">Initial value of the OrgName property.</param>
        public static Organization CreateOrganization(global::System.Int32 orgID, global::System.String orgName)
        {
            Organization organization = new Organization();
            organization.OrgID = orgID;
            organization.OrgName = orgName;
            return organization;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrgID
        {
            get
            {
                return _OrgID;
            }
            set
            {
                if (_OrgID != value)
                {
                    OnOrgIDChanging(value);
                    ReportPropertyChanging("OrgID");
                    _OrgID = StructuralObject.SetValidValue(value, "OrgID");
                    ReportPropertyChanged("OrgID");
                    OnOrgIDChanged();
                }
            }
        }
        private global::System.Int32 _OrgID;
        partial void OnOrgIDChanging(global::System.Int32 value);
        partial void OnOrgIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OrgName
        {
            get
            {
                return _OrgName;
            }
            set
            {
                OnOrgNameChanging(value);
                ReportPropertyChanging("OrgName");
                _OrgName = StructuralObject.SetValidValue(value, false, "OrgName");
                ReportPropertyChanged("OrgName");
                OnOrgNameChanged();
            }
        }
        private global::System.String _OrgName;
        partial void OnOrgNameChanging(global::System.String value);
        partial void OnOrgNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogOrganization", "Log")]
        public EntityCollection<Log> Logs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Log>("LogEntities.LogOrganization", "Log");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Log>("LogEntities.LogOrganization", "Log", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogEntities", Name="Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Users object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="email">Initial value of the email property.</param>
        /// <param name="firstName">Initial value of the firstName property.</param>
        /// <param name="lastName">Initial value of the lastName property.</param>
        /// <param name="addressId">Initial value of the addressId property.</param>
        public static Users CreateUsers(global::System.Int32 userId, global::System.String email, global::System.String firstName, global::System.String lastName, global::System.Int32 addressId)
        {
            Users users = new Users();
            users.UserId = userId;
            users.email = email;
            users.firstName = firstName;
            users.lastName = lastName;
            users.addressId = addressId;
            return users;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value, "UserId");
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true, "UserName");
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String email
        {
            get
            {
                return _email;
            }
            set
            {
                OnemailChanging(value);
                ReportPropertyChanging("email");
                _email = StructuralObject.SetValidValue(value, false, "email");
                ReportPropertyChanged("email");
                OnemailChanged();
            }
        }
        private global::System.String _email;
        partial void OnemailChanging(global::System.String value);
        partial void OnemailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String firstName
        {
            get
            {
                return _firstName;
            }
            set
            {
                OnfirstNameChanging(value);
                ReportPropertyChanging("firstName");
                _firstName = StructuralObject.SetValidValue(value, false, "firstName");
                ReportPropertyChanged("firstName");
                OnfirstNameChanged();
            }
        }
        private global::System.String _firstName;
        partial void OnfirstNameChanging(global::System.String value);
        partial void OnfirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String lastName
        {
            get
            {
                return _lastName;
            }
            set
            {
                OnlastNameChanging(value);
                ReportPropertyChanging("lastName");
                _lastName = StructuralObject.SetValidValue(value, false, "lastName");
                ReportPropertyChanged("lastName");
                OnlastNameChanged();
            }
        }
        private global::System.String _lastName;
        partial void OnlastNameChanging(global::System.String value);
        partial void OnlastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 addressId
        {
            get
            {
                return _addressId;
            }
            set
            {
                OnaddressIdChanging(value);
                ReportPropertyChanging("addressId");
                _addressId = StructuralObject.SetValidValue(value, "addressId");
                ReportPropertyChanged("addressId");
                OnaddressIdChanged();
            }
        }
        private global::System.Int32 _addressId;
        partial void OnaddressIdChanging(global::System.Int32 value);
        partial void OnaddressIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LogEntities", "LogUserProfile", "Log")]
        public EntityCollection<Log> Logs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Log>("LogEntities.LogUserProfile", "Log");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Log>("LogEntities.LogUserProfile", "Log", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
